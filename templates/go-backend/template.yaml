apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: sreez-go-backend
  title: Go backend with ArgoCD setup
  description: Create a Go backend application with CI/CD, APM, GitOps
  tags:
    - recommended
    - go
    - sreez
spec:
  owner: nationtech
  system: sreez
  type: service

  parameters:
    - title: Repository Details
      required:
        - orgName
        - repoName
        - repoVisibility
      properties:
        orgName:
          title: Organization Name
          type: string
        repoName:
          title: Repository Name
          type: string
        description:
          title: Description
          type: string
          description: Help others understand what this component is for
        repoVisibility: 
          title: Repository visibility
          type: string
          default: public
          description: Make the repository public or private
          enum:
            - public
            - private
          enumNames:
            - 'Public'
            - 'Private'
    - title: Account Details
      required:
        - owner
        - system
      properties:
        owner:
          title: Owner
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - Group
                - User
        system:
          title: System
          type: string
          ui:field: EntityPicker
          ui:options:
            catalogFilter:
              kind:
                - System
    - title: GitOps Parameters
        argoInstance:
          title: ArgoCD Instance
          type: string
          default: argocd-server-sreez.apps.oc-med.wk.nt.local:443
        repoPath:
          title: Path in repository that ArgoCD should watch
          type: string
          default: helm/go-helloserver
        valuesFiles:
          title: Values Files for ArgoCD
          type: array
          items:
            type: string
          default:
            - values.yaml
        namespace:
          title: K8s Namespace
          type: string
          default: sreez
        port:
          title: Port
          type: number
          default: 8080
          description: Override the port exposed for the application
  steps:
    - id: sourceCodeTemplate
      name: Generating the Source Code Component
      action: fetch:template
      input:
        url: ./skeleton
        values:
          orgName: ${{ parameters.orgName }}
          repoName: ${{ parameters.repoName }}
          owner: ${{ parameters.owner }}
          system: ${{ parameters.system }}
          applicationType: api
          description: ${{ parameters.description }}
          namespace: ${{ parameters.namespace }}
          imageUrl: ${{ parameters.imageUrl }}
          imageBuilder: s2i-go
          imageRepository: ${{ parameters.imageRepository }}
          port: ${{ parameters.port }}
          ci: ${{ parameters.ci }}
          sourceControl: github.com

    - id: publish
      name: Publishing to the Source Code Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: ${{ parameters.description }}
        repoUrl: github.com?owner=${{ parameters.orgName }}&repo=${{ parameters.repoName }}
        repoVisibility: ${{ parameters.repoVisibility }}
        defaultBranch: master

    - id: create-argocd-application
      name: Create ArgoCD Application
      action: kubernetes:apply
      input:
        namespaced: true
        manifest: |
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: ${{ parameters.appName }}
            namespace: ${{ parameters.namespace }}
          spec:
            destination:
              namespace: ${{ parameters.namespace }}
              server: https://kubernetes.default.svc
            project: default
            source:
              repoURL: ${{ parameters.repoUrl }}
              targetRevision: HEAD
              path: ${{ parameters.repoPath }}
            syncPolicy:
              automated:
                selfHeal: true
              syncOptions:
                - CreateNamespace=true

    - id: register
      name: Registering the Catalog Info Component
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml

  output:
    links:
      - title: Open the Source Code Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open the Catalog Info Component
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}

